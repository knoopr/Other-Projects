import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.sql.*;

public class THEPROJECT extends JFrame implements THEPROJECTFieldEdit {

    private JPanel the_Fields = new JPanel();
    private JPanel the_Buttons = new JPanel();
    private JTextArea output = new JTextArea();
    private int Width = 500, Height = 700, auto_ID;
    private boolean connected_Succesfully = false;
    private Connection conn = null;
    private JTextField ID = new JTextField();
    SETFIELDS 
    SETBUTTON

    public THEPROJECT(int field_Count) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        this.add(the_Fields);
        this.setResizable(false);
        this.setSize(Width, Height);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(new GridLayout(2, 1));
        this.setTitle("THEPROJNAM");

        the_Fields.setLayout(new GridLayout(field_Count + 2, 1));
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Close_connection();
            }
        });
        Add_field("ID", ID);
        ADDFIELDS 
        ADDBUTTON

	Add_button(new JButton("ADD"), new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try {
                    ResultSet rs;
                    Statement sql_Action = conn.createStatement();
                    if (!ID.getText().equals("")) {
                        throw new Exception("The ID must be left empty, as it is automatically assigned\n");
                    }
                    sql_Action.execute("INSERT INTO THEPROJECT VALUES(0, '" ACTIONADD + "');" );		

		auto_ID++;
                    if (auto_ID == 1) {
                        rs = sql_Action.executeQuery("SELECT MAX(id) FROM THEPROJECT;");
                        rs.next();
                        auto_ID = rs.getInt(1);
                    }

                    setDCID(Integer.toString(auto_ID));
                    output.setText("The given data was added successfully\n");

                } catch (Exception e) {
                    output.setText(e.getLocalizedMessage());
                }
            }
        });


        Add_button(new JButton("DELETE"), new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try {
                    ResultSet rs;
                    Statement sql_Action = conn.createStatement();
                    String find_String = "", confirm_String = "", id_String = "";
                    try {
                        id_String = getDCID();
                        find_String = "ID='" + id_String + "' AND ";
                    } catch (Exception e) {
                        if(e.getLocalizedMessage().contains("illegal"))
                            throw new Exception(e.getLocalizedMessage());
                    }

                    ACTIONDEL

                if (find_String.equals("")) {
                        throw new Exception("All of your parameters are empty");
                    } else if (find_String.equals(id_String + "' AND ")) {
                        find_String = find_String.substring(0, find_String.lastIndexOf(" AND "));
                    } else {
                        find_String = find_String.substring(0, find_String.lastIndexOf("AND "));
                    }

                    rs = sql_Action.executeQuery("SELECT * FROM THEPROJECT where " + find_String + ";");
                    while (rs.next()) 
                        confirm_String = confirm_String + CONFIRM "\n";
                    if (confirm_String.equals("")) {
                        JOptionPane.showMessageDialog(new JFrame(), "There are no matches to those Parameters", "", JOptionPane.OK_OPTION);
                    } else if (JOptionPane.showConfirmDialog(new JFrame(), "Did you want to delete these matches:\n" + confirm_String, "", JOptionPane.YES_NO_OPTION) == 0) {
                        sql_Action.execute("DELETE FROM THEPROJECT where " + find_String + ";");
                    }
                } catch (Exception e) {
                    output.setText(e.getLocalizedMessage());
                }
            }
        });


        Add_button(new JButton("QUERY"), new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try {
                    ResultSet rs;
                    Statement sql_Action = conn.createStatement();
                    String find_String = "", id_String = "", confirm_String = "";
                    Boolean one_Found = false;
                    try {
                        id_String = getDCID();
                        find_String = "ID='" + id_String + "' AND ";
                    } catch (Exception e) {
                        if(e.getLocalizedMessage().contains("illegal"))
                            throw new Exception(e.getLocalizedMessage());
                    }

                    /*In my framework this will say ACTION DEL (without the space) because the replacement fits well with query*/
                    ACTIONDEL

                    if (find_String.equals("")) {
                        throw new Exception("All of your parameters are empty");
                    } else if (find_String.equals(id_String + "' AND ")) {
                        find_String = find_String.substring(0, find_String.lastIndexOf(" AND "));
                    } else {
                        find_String = find_String.substring(0, find_String.lastIndexOf("AND "));
                    }

                    rs = sql_Action.executeQuery("SELECT * FROM test1_a3 where " + find_String + ";");
                    while (rs.next()) {
                        if (!id_String.equals("") && rs.getString("ID").equals(id_String.replace("' AND ", ""))) {
                            one_Found = true;
                            ACTIONQUE
                        }
                    }
                    if (one_Found == false) {
                        rs = sql_Action.executeQuery("SELECT * FROM test1_a3 where " + find_String + ";");
                        while (rs.next()) {
                            confirm_String = confirm_String + "RecordFound:\n\t" + CONFIRM "\n";
			    }
			    if (!confirm_String.equals("")) {
                            output.setText(confirm_String);
                        } else {
                            output.setText("No matches were found");
                        }
                    }
                } catch (Exception e) {
                    output.setText(e.getLocalizedMessage());
                }
            }
        });
        Add_button(new JButton("UPDATE"), new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try {
                    ResultSet rs;
                    Statement sql_Action = conn.createStatement();
                    String id_String = "", replace_String = "";
                    try {
                        id_String = getDCID();
                    } catch (Exception e) {
                        if(e.getLocalizedMessage().contains("illegal"))
                            throw new Exception(e.getLocalizedMessage());
                        throw new Exception("You must set a primary key/ID to update");
                    }
                    
                    ACTIONUPD

                    if (replace_String.equals("")) 
                        throw new Exception("All of your parameters are empty");                     
                    else{
                        replace_String = replace_String.substring(0, replace_String.lastIndexOf(", "));
                        sql_Action.execute("UPDATE THEPROJECT SET " + replace_String + " WHERE ID='" + id_String+ "';");
                        output.setText("Update completed succesfully!\n");
                    }
                } catch (Exception e) {
                    output.setText(e.getLocalizedMessage());
                }
            }
        });
        the_Fields.add(the_Buttons);
        Draw_output();

        Make_connection();
        this.setVisible(true);
    }

    private void Draw_output() {
        JPanel output_Panel = new JPanel();
        output_Panel.setLayout(new BorderLayout());

        JLabel status = new JLabel("Status");
        status.setHorizontalAlignment(SwingConstants.CENTER);

        JScrollPane output_Scroll = new JScrollPane(output);
        output_Scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        output_Scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        output.setEditable(false);

        output_Panel.add(output_Scroll);
        output_Panel.add(status, BorderLayout.NORTH);
        this.add(output_Panel);
    }

    private void Make_connection() {
        String JDBC_DRIVER = "com.mysql.jdbc.Driver";
        String DB_URL = "jdbc:mysql://eon.socs.uoguelph.ca/rknoop";
        Statement create_Table = null;

        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, "rknoop", "A42750rknoop");
            connected_Succesfully = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(new JFrame(), "There was a problem making the connection,\ncheck if you are connected to the internet.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                create_Table = conn.createStatement();
                DatabaseMetaData meta = conn.getMetaData();
                ResultSet rs = meta.getTables(null, null, null, new String[]{"TABLE"});

                while (rs.next()) {
                    if (rs.getString("TABLE_NAME").equals("THEPROJECT")) {
                        if (check_Table("ID", "INT") && BOOCHECK) {
                            JOptionPane.showMessageDialog(new JFrame(), "The Database was loaded succesfully", "", JOptionPane.PLAIN_MESSAGE);
                            rs = create_Table.executeQuery("SELECT MAX(id) FROM THEPROJECT;");
                            rs.next();
                            auto_ID = rs.getInt(1);
                        } else if (JOptionPane.showConfirmDialog(new JFrame(), "The database table is missing a field,\ndid you want to delete it and create a new one?", "", JOptionPane.YES_NO_OPTION) == 0) {
                            create_Table.execute("DROP TABLE THEPROJECT;");
                            auto_ID = 0;
                        } else {
                            System.exit(1);
                        }
                        break;
                    }
                }
                create_Table.execute("CREATE TABLE IF NOT EXISTS THEPROJECT(ID INT NOT NULL AUTO_INCREMENT, SQLENTRY primary key(id));");
            } catch (Exception e) {
            }
        }
    }

    private boolean check_Table(String field_Name, String field_Type) {
        try {
            ResultSet columns = conn.getMetaData().getColumns(null, null, "THEPROJECT", null);
            while (columns.next()) {
                if (columns.getString("COLUMN_NAME").equals(field_Name) && columns.getString("TYPE_NAME").equals(field_Type)) {
                    return true;
                }
            }
        } catch (Exception e) {
        }
        return false;
    }

    private void Close_connection() {
        try {
            if (conn != null && connected_Succesfully == true) {
                conn.close();
            }
        } catch (Exception e) {
        }
    }

    private void Add_field(String field_Name, JTextField the_Text) {
        JPanel Field = new JPanel();

        JLabel the_Label = new JLabel("   " + field_Name);

        the_Text.setPreferredSize(new Dimension((Width / 4) * 3, 20));
        the_Label.setPreferredSize(new Dimension((Width / 4) - 20, 20));

        Field.add(the_Label);
        Field.add(the_Text);

        the_Fields.add(Field);
    }

    private void Add_button(JButton the_Button, ActionListener the_Action) {
        the_Button.addActionListener(the_Action);
        the_Buttons.add(the_Button);
    }

    public void appendToStatusArea(String message) {
        output.setText(output.getText() + message);
    }

    public String getDCID() throws IllegalFieldValueException {
        if (ID.getText().equals("")) {
            throw new IllegalFieldValueException("ID is empty");
        }
        try {
            Integer.parseInt(ID.getText());
        } catch (Exception e) {
            throw new IllegalFieldValueException("ID contains the illegal value: " + ID.getText() + " it should contain an integer");
        }
        return ID.getText();
    }

    public void setDCID(String the_Text) {
        ID.setText(the_Text);
    }
    GETANDSET

    public static void main(String[] args) {
        THEPROJECT the_Project = new THEPROJECT(NUMBER);

    }
}

class IllegalFieldValueException extends Exception {

    public IllegalFieldValueException() {
    }

    public IllegalFieldValueException(String Message) {
        super(Message);
    }
}